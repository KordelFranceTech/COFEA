import numpy as np

# cliffwalking small
# benchmark_q_table = [[-15.545958463228613, -14.841407509657364, -14.905654631858463, -15.258533570076143], [-14.34374423699128, -13.833190246401887, -14.588197865703856, -14.272732101035642], [-13.158781236231018, -12.79370680438364, -12.820968212222056, -14.2213165440805], [-12.671752877788968, -11.750067790006074, -12.457253437701603, -11.985935972014003], [-11.360043353390289, -10.683968561374233, -11.086033686046697, -12.331847975941443], [-10.15666675047419, -9.618495769856526, -10.178468999941298, -11.186255097117682], [-9.183184278569598, -8.58868191842294, -8.713342543768636, -9.093657225582493], [-8.23237286156413, -7.536598376537722, -7.882349111015731, -8.612124418554261], [-7.350129698728506, -6.490474353457726, -6.8295356567518315, -7.174512061946963], [-6.3462115632018605, -5.433496986252699, -5.533560191593505, -6.7258532158858095], [-5.070489826779088, -4.388096636250604, -4.428688132399232, -5.488673679784014], [-4.283947217310576, -4.367957454533473, -3.3151701865901093, -4.213336862765313], [-15.790868077966735, -15.13179481891282, -17.354698875672376, -16.14299840651628], [-14.83158715250839, -13.961659534596897, -17.710792717646868, -16.189961477608644], [-13.792239918210942, -12.786880815834088, -16.5086738920429, -15.087936908664194], [-12.72095918245359, -11.6040674768626, -15.508075193301138, -13.928419290492553], [-11.715393453784706, -10.402965202180125, -14.922945682508352, -12.639703279674563], [-10.682143085288589, -9.212889414049506, -13.037040397446193, -11.536390486888267], [-9.587088127187677, -8.026524286631386, -11.733621348230443, -10.218545779501671], [-8.58085446432362, -6.843946391498411, -10.056883452602168, -9.199002934832105], [-7.465421021423957, -5.632036672631559, -9.930871031959269, -7.977330438126176], [-6.435999969954295, -4.454257995994907, -7.216874203853324, -6.821629447032176], [-5.384434923251616, -3.3151853799770494, -4.493384882409641, -5.630757929457548], [-4.377984889546464, -3.312884973994013, -2.17470356021036, -4.452513610545408], [-16.228131837361634, -17.728282129725883, -21.04063173112798, -17.315330274782568], [-15.12292294092667, -15.646811150378019, -80.35570543532103, -15.366549610399543], [-13.930561032712134, -14.47937175282177, -78.28013814860631, -14.106927832467353], [-12.730868833964614, -12.936552065702841, -83.75706286749019, -14.811341878268015], [-11.562593043978648, -12.416568218395035, -106.59958992204136, -12.440601022942836], [-10.377916829157414, -10.697309154944756, -86.35199959162443, -11.506277218726606], [-9.121576932588571, -9.639371576291108, -81.90973478958216, -11.049520187926515], [-8.001462152426708, -8.541292349675143, -53.22260742968243, -10.165535930312892], [-6.770828640643147, -6.960534010249303, -100.34395731407815, -8.344808588560142], [-4.98701830394761, -4.498686838559401, -80.39646156828309, -4.924451084418465], [-2.8963130887809605, -2.1746835580992014, -51.353419362038636, -5.8541978853389445], [-3.314073924250427, -2.1616536078221524, -1.0, -4.513278476638931], [-17.41239724027363, -119.98574681143171, -21.048775967077134, -21.12012005398659], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]]

# cliffwalking large
benchmark_q_table = np.zeros((8,24)).tolist()

# frozen lake 4x4
# benchmark_q_table = [[0.19699091977874858, 0.1954087976046685, 0.3831289527092707, 0.20025505331000637], [0.010251247538925944, 0.0018521369404023444, 0.054444432337059895, 0.5465898272386235], [0.1445398465345158, 0.5314671702618609, 0.34851262769733765, 0.21091244590509], [0.3346432383645555, 0.13127750214978212, 0.03502104868008893, 0.44392336769204455], [0.19676310325628188, 0.041281446034698355, 0.0026171914038602383, 8.360844235802113e-05], [0.0, 0.0, 0.0, 0.0], [0.05269259389276665, 2.2429382318159625e-06, 0.47374830919034416, 0.04096127189458945], [0.0, 0.0, 0.0, 0.0], [0.01029130210736115, 0.32719235326538054, 0.004168627454097816, 0.4074485848693001], [0.39403562106474965, 0.39481054778702823, 0.14992223621015, 0.08264332145840703], [0.6261587468285372, 0.07550976676641108, 0.006148402709041947, 0.1192796226011314], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.5147514122543424, 0.1450095277697171, 0.4697752251749026, 0.14780805027024868], [0.6746954655563783, 0.6853330241879995, 0.6721888671616738, 0.6910942591907296], [0.0, 0.0, 0.0, 0.0]]

# frozen lake 8x8
# benchmark_q_table = [[0.609593723894412, 0.6416776040993811, 0.6416776040993811, 0.609593723894412], [0.609593723894412, 0.675450109578296, 0.675450109578296, 0.6416776040993811], [0.6416776040993811, 0.7110001153455747, 0.7110001153455747, 0.675450109578296], [0.675450109578296, 0.7484211740479735, 0.7484211740479735, 0.7110001153455747], [0.7110001153455747, 0.7878117621557615, 0.7878117621557615, 0.7484211740479735], [0.7484211740479735, 0.829275539111328, 0.8292755391113278, 0.7878117621557615], [0.7878016729987862, 0.8729216201171874, 0.7874891717604267, 0.8286912536916289], [0.8292751060415549, 0.88211026875, 0.0, 0.6292208690149146], [0.6416776040993811, 0.609593723894412, 0.675450109578296, 0.609593723894412], [0.6416776040993811, 0.6416776040993811, 0.7110001153455747, 0.6416776040993811], [0.675450109578296, 0.675450109578296, 0.7484211740479735, 0.675450109578296], [0.7110001153455747, 0.0, 0.7878117621557615, 0.7110001153455747], [0.7484211740479735, 0.829275539111328, 0.829275539111328, 0.7484211740479735], [0.7878117617842909, 0.8729216201171874, 0.8729216201171874, 0.7878117621557615], [0.8292750604361128, 0.9188648632812499, 0.9188647691833601, 0.8292755389045227], [0.8729215830267758, 0.9672261718749999, 0.911501979726553, 0.787771628837288], [0.5756996663146081, 0.5444167794151393, 0.6416776040993811, 0.46329123015975315], [0.6040742488444829, 0.30504939374103196, 0.6715532156274816, 0.675450109578296], [0.4392812675934692, 0.0, 0.0, 0.7110001153455747], [0.0, 0.0, 0.0, 0.0], [0.0, 0.7878117621557615, 0.8729216201171874, 0.7878117621557615], [0.829275539111328, 0.0, 0.9188648632812499, 0.829275539111328], [0.8729216201171874, 0.9672261718749999, 0.9672261718749999, 0.8729216201171874], [0.9188648632812499, 1.0181328125, 0.9672261718749999, 0.9188648632812499], [0.0, 0.0, 0.0, 0.6092900913053603], [0.5290342231944112, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.5403600876626368], [0.0, 0.0, 0.0, 0.0], [0.0, 0.8231899961802801, 0.0, 0.829275539111328], [0.0, 0.0, 0.0, 0.0], [0.0, 1.0181328125, 1.0181328125, 0.9188648632812499], [0.9672261718749999, 1.07171875, 1.0181328125, 0.9672261718749999], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.9669154706009514, 0.0], [0.9108055457592479, 0.8468089950829216, 1.0181328125, 0.0], [0.9672261718749999, 0.0, 1.07171875, 0.9672261718749999], [1.0181328125, 1.128125, 1.07171875, 1.0181328125], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.9594863021809811], [0.0, 0.0, 0.0, 0.0], [0.0, 1.1875, 1.128125, 1.07171875], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 1.25, 1.1875, 1.128125], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]]



def get_best_policy(q_table):
    policy: list = []
    for state in q_table:
        a = np.argmax(state)
        policy.append(a)
    return policy


def get_best_policy_osi(pso_nn, env):
    # return pso_nn.best_individual
    policy: list = []
    for state in range(env.observation_space.n):
        a = np.argmax(pso_nn.best_individual.predict(np.identity(env.observation_space.n)[state:state + 1]))
        policy.append(a)
    return policy